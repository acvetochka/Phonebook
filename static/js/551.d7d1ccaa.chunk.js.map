{"version":3,"file":"static/js/551.d7d1ccaa.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/helped/getNotificatin.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  color: #181717;\n  text-align: center;\n  text-shadow: 2px 2px 5px white;\n  font-size: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nexport function Section({ title, children }) {\n  return (\n    <section>\n      <Title>{title}</Title>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import Notiflix from 'notiflix';\n\nexport const getNotification = message => {\n  Notiflix.Report.warning('Warning', message);\n};\n\nNotiflix.Report.init({\n  svgSize: '50px',\n  messageFontSize: '20px',\n  warning: {\n    svgColor: '#0f596b',\n\n    buttonBackground: '#0f596b',\n    backOverlayColor: 'rgba(0,0, 0,0.2)',\n  },\n});\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  max-width: 350px;\n  margin: 0 auto;\n  border: 1px solid gray;\n  border-radius: 10px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 1px 1px 5px gray;\n  background: linear-gradient(180deg, #b5b5b5, #599caa, #0f596b);\n`;\n\nexport const FormLabel = styled.label`\n  font-size: 28px;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n  gap: 5px;\n`;\n\nexport const FormInput = styled.input`\n  max-width: 300px;\n  width: 100%;\n  height: 30px;\n  border-radius: 8px;\n  font-size: 20px;\n  padding: 10px;\n`;\n\nexport const FormButton = styled.button`\n  margin: 0 auto;\n  border-radius: 8px;\n  padding: 5px 10px;\n  background: transparent;\n  color: white;\n  box-shadow: 4px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  text-shadow: 5px 5px 10px black;\n  font-size: 18px;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    background: #145d6f;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n// import { nanoid } from '@reduxjs/toolkit';\n\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { Form, FormLabel, FormInput, FormButton } from './ContactForm.styled';\nimport { getNotification } from 'components/helped/getNotificatin';\n\nexport function ContactForm() {\n  const { contactsItem } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const { name, number } = form.elements;\n\n\n    const newContact = {\n      // id: nanoid(),\n      name: name.value,\n      phone: number.value,\n    };\n    // console.log(newContact);\n    \n    if (contactsItem.some(contact => contact.name === name.value)) {\n      getNotification(`${name.value} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n      // console.log(contactsItem);\n      \n      form.reset();\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\s]+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        Number\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\nimport { BiSolidTrash } from 'react-icons/bi';\n\nexport const ContactListStyled = styled.ul`\n  padding-left: 0;\n  max-width: 450px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 1048px) {\n    width: 450px;\n  }\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 26px;\n  border: 1px solid gray;\n  border-radius: 10px;\n  box-shadow: 1px 1px 5px gray;\n  padding: 10px 20px;\n  margin-bottom: 10px;\n  background: linear-gradient(180deg, #b5b5b5, #599caa, #0f596b);\n`;\n\nexport const ContactData = styled.p`\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Span = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\nexport const ButtonDelete = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  border-radius: 8px;\n  height: 35px;\n  padding: 0 5px;\n  background: transparent;\n  color: white;\n  box-shadow: 4px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  text-shadow: 5px 5px 10px black;\n  font-size: 18px;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    background: #2a7182;\n  }\n`;\n\nexport const DeleteSpan = styled.span`\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const ButtonIcon = styled(BiSolidTrash)`\n  fill: currentColor;\n`;\n\nexport const Text = styled.li`\n  display: block;\n  font-size: 28px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { BiSolidFace, BiSolidPhone } from 'react-icons/bi';\n\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport {\n  ContactListStyled,\n  ContactItem,\n  ContactData,\n  ButtonDelete,\n  Span,\n  ButtonIcon,\n  Text,\n  DeleteSpan,\n} from './ContactList.styled';\n// import { Loader } from 'components/Loader/Loader';\n\nexport function ContactList() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const { contactsItem,  error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterContact = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contactsItem.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getFilterContact();\n\n  return (\n    <ContactListStyled>\n      {/* {isLoading && <Loader size=\"40\"/>} */}\n      {error && <p>{error}</p>}\n      {contactsItem.length > 0 ? (\n        visibleContacts.map(({ _id, name, phone}) => (\n          <ContactItem key={_id}>\n            <ContactData>\n              <Span>\n                <BiSolidFace />\n                {name}:{' '}\n              </Span>\n              <Span>\n                <BiSolidPhone />\n                {phone}\n              </Span>\n            </ContactData>\n            <ButtonDelete\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(_id))}\n            >\n              <ButtonIcon /> <DeleteSpan>Delete</DeleteSpan>\n            </ButtonDelete>\n          </ContactItem>\n        ))\n      ) : (\n        <Text>Oops, contact list is empty. Add new contact</Text>\n      )}\n    </ContactListStyled>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 26px;\n  align-items: center;\n`;\n\nexport const FilterInput = styled.input`\n  max-width: 300px;\n  width: 100%;\n  height: 30px;\n  font-size: 24px;\n  border-radius: 8px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Container, FilterLabel, FilterInput } from './Filter.styled';\n\n\nexport function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <Container>\n      <FilterLabel>\n        Find contact by name\n        <FilterInput type=\"text\" onChange={onChangeFilter} value={filter} />\n      </FilterLabel>\n    </Container>\n  );\n}\n\n","// import { useSelector } from 'react-redux';\n\n// import { getContacts } from 'redux/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Section } from 'components/Section/Section';\n\nconst Contacts = () => {\n  // const { isLoading, error } = useSelector(getContacts);\n  return (\n    <>\n      <Section title={'Add new contact'}>\n        <ContactForm />\n      </Section>\n      <Section title={'My contacts'}>\n      {/* {isLoading && !error && <b>Request in progress...</b>} */}\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Title","styled","Section","title","children","getNotification","message","Notiflix","svgSize","messageFontSize","warning","svgColor","buttonBackground","backOverlayColor","Form","FormLabel","FormInput","FormButton","ContactForm","contactsItem","useSelector","getContacts","dispatch","useDispatch","onSubmit","evt","preventDefault","form","target","elements","name","number","newContact","value","phone","some","contact","addContact","reset","type","pattern","required","ContactListStyled","ContactItem","ContactData","Span","ButtonDelete","DeleteSpan","ButtonIcon","BiSolidTrash","Text","ContactList","filter","getFilter","error","useEffect","fetchContacts","visibleContacts","normalizedFilter","toLowerCase","trim","includes","getFilterContact","length","map","_id","onClick","deleteContact","Container","FilterLabel","FilterInput","Filter","onChange","setFilter"],"sourceRoot":""}