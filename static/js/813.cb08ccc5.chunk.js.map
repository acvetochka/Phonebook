{"version":3,"file":"static/js/813.cb08ccc5.chunk.js","mappings":"0JAEaA,E,QAAQC,EAAAA,GAAH,yH,UCCX,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,gCACE,SAACJ,EAAD,UAAQG,IACPC,IAGN,C,6ECRYC,EAAkB,SAAAC,GAC7BC,IAAAA,OAAAA,QAAwB,UAAWD,EACpC,EAEDC,IAAAA,OAAAA,KAAqB,CACnBC,QAAS,OACTC,gBAAiB,OACjBC,QAAS,CACPC,SAAU,UAEVC,iBAAkB,UAClBC,iBAAkB,qB,+ICXTC,EAAOb,EAAAA,EAAAA,KAAH,8SAaJc,EAAed,EAAAA,EAAAA,IAAH,6EAMZe,EAAaf,EAAAA,EAAAA,OAAH,kY,ydCnBVgB,EAAkBhB,EAAAA,EAAAA,IAAH,+CAGfiB,EAAYjB,EAAAA,EAAAA,MAAH,oUAiBTkB,EAAYlB,EAAAA,EAAAA,MAAH,+N,UCpBf,SAASmB,EAAOC,GAEnB,IAAOC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,KAAMC,EAA8BH,EAA9BG,QAASrB,EAAqBkB,EAArBlB,MAAOsB,EAAcJ,EAAdI,WAEnC,OACI,UAACR,EAAD,YACA,SAACE,EAAD,CACEG,KAAMA,EACNC,KAAMA,EACNG,GAAIH,EACJC,QAASA,EACTrB,MAAOA,EACPwB,SAAUF,KAEZ,SAACP,EAAD,CAAWU,QAASL,EAApB,SAA2BA,MAIlC,CCNM,SAASM,IACd,IAAQC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,GAA7BF,aACFG,GAAWC,EAAAA,EAAAA,MAwBjB,OACE,UAACpB,EAAD,CAAMqB,SAvBa,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,OACjB,EAAyBD,EAAKE,SAAtBjB,EAAR,EAAQA,KAAMkB,EAAd,EAAcA,OAERC,EAAa,CAEjBnB,KAAMA,EAAKoB,MACXC,MAAOH,EAAOE,OAIZb,EAAae,MAAK,SAAAC,GAAO,OAAIA,EAAQvB,OAASA,EAAKoB,KAA1B,KAC3BtC,EAAAA,EAAAA,GAAgB,GAAD,OAAIkB,EAAKoB,MAAT,8BAEfV,GAASc,EAAAA,EAAAA,IAAWL,IAGpBJ,EAAKU,QAER,EAGC,WACE,SAACjC,EAAD,UACCkC,EAAAA,KAAe,SAAEC,EAAOC,GAAT,OAAiB,SAAC/B,GAAD,UAAqB8B,GAATC,EAA7B,OAGhB,SAACnC,EAAD,CAAYM,KAAK,SAAjB,2BAGL,C,wCC9CY8B,EAAoBnD,EAAAA,EAAAA,GAAH,yJAUjBoD,EAAcpD,EAAAA,EAAAA,GAAH,+TAaXqD,EAAcrD,EAAAA,EAAAA,EAAH,iGAOXsD,EAAOtD,EAAAA,EAAAA,KAAH,gFAKJuD,EAAevD,EAAAA,EAAAA,OAAH,gdAsBZwD,EAAaxD,EAAAA,EAAAA,KAAH,2FAMVyD,GAAazD,EAAAA,EAAAA,GAAO0D,EAAAA,IAAP1D,CAAH,+CAIV2D,EAAO3D,EAAAA,EAAAA,GAAH,+DCpDV,SAAS4D,IACd,IAAMC,GAAS/B,EAAAA,EAAAA,IAAYgC,EAAAA,GACrB9B,GAAWC,EAAAA,EAAAA,MACjB,GAAiCH,EAAAA,EAAAA,IAAYC,EAAAA,GAArCF,EAAR,EAAQA,aAAekC,EAAvB,EAAuBA,OAEvBC,EAAAA,EAAAA,YAAU,WACRhC,GAASiC,EAAAA,EAAAA,MACV,GAAE,CAACjC,IAEJ,IAOMkC,EAPmB,WACvB,IAAMC,EAAmBN,EAAOO,cAAcC,OAC9C,OAAOxC,EAAagC,QAAO,qBAAGvC,KACvB8C,cAAcE,SAASH,EADH,GAG5B,CAEuBI,GAExB,OACE,UAACpB,EAAD,WAEGY,IAAS,uBAAIA,IACblC,EAAa2C,OAAS,EACrBN,EAAgBO,KAAI,gBAAGC,EAAH,EAAGA,IAAKpD,EAAR,EAAQA,KAAMqB,EAAd,EAAcA,MAAd,OAClB,UAACS,EAAD,YACE,UAACC,EAAD,YACE,UAACC,EAAD,YACE,SAAC,MAAD,IACChC,EAFH,IAEU,QAEV,UAACgC,EAAD,YACE,SAAC,MAAD,IACCX,SAGL,UAACY,EAAD,CACElC,KAAK,SACLsD,QAAS,kBAAM3C,GAAS4C,EAAAA,EAAAA,IAAcF,GAA7B,EAFX,WAIE,SAACjB,EAAD,IAJF,KAIiB,SAACD,EAAD,0BAfDkB,EADA,KAqBpB,SAACf,EAAD,6DAIP,C,oBChEYkB,EAAY7E,EAAAA,EAAAA,IAAH,gDAIT8E,EAAc9E,EAAAA,EAAAA,MAAH,+HAQX+E,EAAc/E,EAAAA,EAAAA,MAAH,yHCPjB,SAASgF,IACd,IAAMnB,GAAS/B,EAAAA,EAAAA,IAAYgC,EAAAA,GACrB9B,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC4C,EAAD,WACE,UAACC,EAAD,mCAEE,SAACC,EAAD,CAAa1D,KAAK,OAAO4D,SARR,SAAA9C,GACrBH,GAASkD,EAAAA,EAAAA,IAAU/C,EAAIG,OAAOI,OAC/B,EAMwDA,MAAOmB,QAIjE,C,cCCD,GAhBiB,WAEf,OACE,iCACE,SAAC5D,EAAA,EAAD,CAASC,MAAO,kBAAhB,UACE,SAAC0B,EAAD,OAEF,UAAC3B,EAAA,EAAD,CAASC,MAAO,cAAhB,WAEE,SAAC8E,EAAD,KACA,SAACpB,EAAD,SAIP,C","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/helped/getNotificatin.js","components/ContactForm/ContactForm.styled.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  color: #181717;\n  text-align: center;\n  text-shadow: 2px 2px 5px white;\n  font-size: 30px;\n`;\n","import PropTypes from 'prop-types';\nimport { Title } from './Section.styled';\n\nexport function Section({ title, children }) {\n  return (\n    <section>\n      <Title>{title}</Title>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import Notiflix from 'notiflix';\n\nexport const getNotification = message => {\n  Notiflix.Report.warning('Warning', message);\n};\n\nNotiflix.Report.init({\n  svgSize: '50px',\n  messageFontSize: '20px',\n  warning: {\n    svgColor: '#0f596b',\n\n    buttonBackground: '#0f596b',\n    backOverlayColor: 'rgba(0,0, 0,0.2)',\n  },\n});\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  max-width: 350px;\n  margin: 0 auto;\n  border: 1px solid gray;\n  border-radius: 10px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: 1px 1px 5px gray;\n  background: linear-gradient(180deg, #b5b5b5, #599caa, #0f596b);\n`;\n\nexport const InputWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`\n\nexport const FormButton = styled.button`\n  margin: 0 auto;\n  border-radius: 8px;\n  padding: 5px 10px;\n  background: transparent;\n  color: white;\n  box-shadow: 4px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  text-shadow: 5px 5px 10px black;\n  font-size: 18px;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    background: #145d6f;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const InputContrainer = styled.div`\n  position: relative;\n`;\nexport const FormLabel = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 10px;\n//   height: 100%;\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  transform: translateY(-50%);\n  // margin-bottom: 15px;\n  gap: 5px;\n  text-transform: capitalize;\n  line-height: 0.5;\n  padding: 5px;\n  border-radius: 5px;\n`;\n\nexport const FormInput = styled.input`\n  max-width: 300px;\n  width: 100%;\n  height: 40px;\n  border-radius: 8px;\n  font-size: 20px;\n  padding: 10px;\n\n  &:focus ~ label {\n    top: 0;\n    // left: 2px;\n    background: white;\n  }\n`;\n","import { FormInput, FormLabel, InputContrainer } from \"./Input.styled\";\n\nexport function Input (inputData){\n\n    const {type, name, pattern, title, isRequired} = inputData;\n\n    return (\n        <InputContrainer>\n        <FormInput\n          type={type}\n          name={name}\n          id={name}\n          pattern={pattern}\n          title={title}\n          required={isRequired}\n        />\n        <FormLabel htmlFor={name}>{name}</FormLabel>\n      </InputContrainer>\n    )\n        \n}\n\n// Input.propTypes = {\n//     name: PropTypes.string.isRequired,\n//     type: PropTypes.string.isRequired,\n//     pattern: PropTypes.string,\n//     title: PropTypes.string.isRequired,\n//     isRequired: PropTypes.bool,\n//   };","import { useDispatch, useSelector } from 'react-redux';\n// import { nanoid } from '@reduxjs/toolkit';\n\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport {\n  Form,\n  FormButton,\n  InputWrapper,\n} from './ContactForm.styled';\nimport { getNotification } from 'components/helped/getNotificatin';\nimport inputsData from '../../data/inputsData.json';\nimport { Input } from 'components/Input/Input';\n\nexport function ContactForm() {\n  const { contactsItem } = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const { name, number } = form.elements;\n\n    const newContact = {\n      // id: nanoid(),\n      name: name.value,\n      phone: number.value,\n    };\n    // console.log(newContact);\n\n    if (contactsItem.some(contact => contact.name === name.value)) {\n      getNotification(`${name.value} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n      // console.log(contactsItem);\n\n      form.reset();\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputWrapper>\n      {inputsData.map(( input, idx) => <Input key={idx} {...input} />\n      )}\n</InputWrapper>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n}\n\n\n\n      // {/* <InputContrainer>\n      //   <FormInput\n      //     type=\"text\"\n      //     name=\"name\"\n      //     id=\"name\"\n      //     pattern=\"^[a-zA-Zа-яА-Я\\s]+$\"\n      //     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      //     required\n      //   />\n      //   <FormLabel for=\"name\">Name </FormLabel>\n      // </InputContrainer>\n      // <InputContrainer>\n      //   <FormInput\n      //     type=\"tel\"\n      //     name=\"number\"\n      //     id=\"number\"\n      //     pattern=\"\\+?[0-9\\s\\-\\(\\)]+\"\n      //     title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n      //     required\n      //   />\n      //   <FormLabel for=\"number\">Number </FormLabel>\n      // </InputContrainer> */}","import styled from '@emotion/styled';\nimport { BiSolidTrash } from 'react-icons/bi';\n\nexport const ContactListStyled = styled.ul`\n  padding-left: 0;\n  max-width: 450px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 1048px) {\n    width: 450px;\n  }\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 26px;\n  border: 1px solid gray;\n  border-radius: 10px;\n  box-shadow: 1px 1px 5px gray;\n  padding: 10px 20px;\n  margin-bottom: 10px;\n  background: linear-gradient(180deg, #b5b5b5, #599caa, #0f596b);\n`;\n\nexport const ContactData = styled.p`\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Span = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\nexport const ButtonDelete = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px;\n  border-radius: 8px;\n  height: 35px;\n  padding: 0 5px;\n  background: transparent;\n  color: white;\n  box-shadow: 4px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  text-shadow: 5px 5px 10px black;\n  font-size: 18px;\n\n  :hover,\n  :focus {\n    cursor: pointer;\n    background: #2a7182;\n  }\n`;\n\nexport const DeleteSpan = styled.span`\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const ButtonIcon = styled(BiSolidTrash)`\n  fill: currentColor;\n`;\n\nexport const Text = styled.li`\n  display: block;\n  font-size: 28px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { BiSolidFace, BiSolidPhone } from 'react-icons/bi';\n\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport {\n  ContactListStyled,\n  ContactItem,\n  ContactData,\n  ButtonDelete,\n  Span,\n  ButtonIcon,\n  Text,\n  DeleteSpan,\n} from './ContactList.styled';\n// import { Loader } from 'components/Loader/Loader';\n\nexport function ContactList() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const { contactsItem,  error } = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilterContact = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contactsItem.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const visibleContacts = getFilterContact();\n\n  return (\n    <ContactListStyled>\n      {/* {isLoading && <Loader size=\"40\"/>} */}\n      {error && <p>{error}</p>}\n      {contactsItem.length > 0 ? (\n        visibleContacts.map(({ _id, name, phone}) => (\n          <ContactItem key={_id}>\n            <ContactData>\n              <Span>\n                <BiSolidFace />\n                {name}:{' '}\n              </Span>\n              <Span>\n                <BiSolidPhone />\n                {phone}\n              </Span>\n            </ContactData>\n            <ButtonDelete\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(_id))}\n            >\n              <ButtonIcon /> <DeleteSpan>Delete</DeleteSpan>\n            </ButtonDelete>\n          </ContactItem>\n        ))\n      ) : (\n        <Text>Oops, contact list is empty. Add new contact</Text>\n      )}\n    </ContactListStyled>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 26px;\n  align-items: center;\n`;\n\nexport const FilterInput = styled.input`\n  max-width: 300px;\n  width: 100%;\n  height: 30px;\n  font-size: 24px;\n  border-radius: 8px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { setFilter } from 'redux/filterSlice';\nimport { getFilter } from 'redux/selectors';\nimport { Container, FilterLabel, FilterInput } from './Filter.styled';\n\n\nexport function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n\n  return (\n    <Container>\n      <FilterLabel>\n        Find contact by name\n        <FilterInput type=\"text\" onChange={onChangeFilter} value={filter} />\n      </FilterLabel>\n    </Container>\n  );\n}\n\n","// import { useSelector } from 'react-redux';\n\n// import { getContacts } from 'redux/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Section } from 'components/Section/Section';\n\nconst Contacts = () => {\n  // const { isLoading, error } = useSelector(getContacts);\n  return (\n    <>\n      <Section title={'Add new contact'}>\n        <ContactForm />\n      </Section>\n      <Section title={'My contacts'}>\n      {/* {isLoading && !error && <b>Request in progress...</b>} */}\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Title","styled","Section","title","children","getNotification","message","Notiflix","svgSize","messageFontSize","warning","svgColor","buttonBackground","backOverlayColor","Form","InputWrapper","FormButton","InputContrainer","FormLabel","FormInput","Input","inputData","type","name","pattern","isRequired","id","required","htmlFor","ContactForm","contactsItem","useSelector","getContacts","dispatch","useDispatch","onSubmit","evt","preventDefault","form","target","elements","number","newContact","value","phone","some","contact","addContact","reset","inputsData","input","idx","ContactListStyled","ContactItem","ContactData","Span","ButtonDelete","DeleteSpan","ButtonIcon","BiSolidTrash","Text","ContactList","filter","getFilter","error","useEffect","fetchContacts","visibleContacts","normalizedFilter","toLowerCase","trim","includes","getFilterContact","length","map","_id","onClick","deleteContact","Container","FilterLabel","FilterInput","Filter","onChange","setFilter"],"sourceRoot":""}